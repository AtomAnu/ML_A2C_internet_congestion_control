// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace ns3opengym {
class BoxDataContainer;
class BoxDataContainerDefaultTypeInternal;
extern BoxDataContainerDefaultTypeInternal _BoxDataContainer_default_instance_;
class BoxSpace;
class BoxSpaceDefaultTypeInternal;
extern BoxSpaceDefaultTypeInternal _BoxSpace_default_instance_;
class DataContainer;
class DataContainerDefaultTypeInternal;
extern DataContainerDefaultTypeInternal _DataContainer_default_instance_;
class DictDataContainer;
class DictDataContainerDefaultTypeInternal;
extern DictDataContainerDefaultTypeInternal _DictDataContainer_default_instance_;
class DictSpace;
class DictSpaceDefaultTypeInternal;
extern DictSpaceDefaultTypeInternal _DictSpace_default_instance_;
class DiscreteDataContainer;
class DiscreteDataContainerDefaultTypeInternal;
extern DiscreteDataContainerDefaultTypeInternal _DiscreteDataContainer_default_instance_;
class DiscreteSpace;
class DiscreteSpaceDefaultTypeInternal;
extern DiscreteSpaceDefaultTypeInternal _DiscreteSpace_default_instance_;
class EnvActMsg;
class EnvActMsgDefaultTypeInternal;
extern EnvActMsgDefaultTypeInternal _EnvActMsg_default_instance_;
class EnvStateMsg;
class EnvStateMsgDefaultTypeInternal;
extern EnvStateMsgDefaultTypeInternal _EnvStateMsg_default_instance_;
class SimInitAck;
class SimInitAckDefaultTypeInternal;
extern SimInitAckDefaultTypeInternal _SimInitAck_default_instance_;
class SimInitMsg;
class SimInitMsgDefaultTypeInternal;
extern SimInitMsgDefaultTypeInternal _SimInitMsg_default_instance_;
class SpaceDescription;
class SpaceDescriptionDefaultTypeInternal;
extern SpaceDescriptionDefaultTypeInternal _SpaceDescription_default_instance_;
class TupleDataContainer;
class TupleDataContainerDefaultTypeInternal;
extern TupleDataContainerDefaultTypeInternal _TupleDataContainer_default_instance_;
class TupleSpace;
class TupleSpaceDefaultTypeInternal;
extern TupleSpaceDefaultTypeInternal _TupleSpace_default_instance_;
}  // namespace ns3opengym
PROTOBUF_NAMESPACE_OPEN
template<> ::ns3opengym::BoxDataContainer* Arena::CreateMaybeMessage<::ns3opengym::BoxDataContainer>(Arena*);
template<> ::ns3opengym::BoxSpace* Arena::CreateMaybeMessage<::ns3opengym::BoxSpace>(Arena*);
template<> ::ns3opengym::DataContainer* Arena::CreateMaybeMessage<::ns3opengym::DataContainer>(Arena*);
template<> ::ns3opengym::DictDataContainer* Arena::CreateMaybeMessage<::ns3opengym::DictDataContainer>(Arena*);
template<> ::ns3opengym::DictSpace* Arena::CreateMaybeMessage<::ns3opengym::DictSpace>(Arena*);
template<> ::ns3opengym::DiscreteDataContainer* Arena::CreateMaybeMessage<::ns3opengym::DiscreteDataContainer>(Arena*);
template<> ::ns3opengym::DiscreteSpace* Arena::CreateMaybeMessage<::ns3opengym::DiscreteSpace>(Arena*);
template<> ::ns3opengym::EnvActMsg* Arena::CreateMaybeMessage<::ns3opengym::EnvActMsg>(Arena*);
template<> ::ns3opengym::EnvStateMsg* Arena::CreateMaybeMessage<::ns3opengym::EnvStateMsg>(Arena*);
template<> ::ns3opengym::SimInitAck* Arena::CreateMaybeMessage<::ns3opengym::SimInitAck>(Arena*);
template<> ::ns3opengym::SimInitMsg* Arena::CreateMaybeMessage<::ns3opengym::SimInitMsg>(Arena*);
template<> ::ns3opengym::SpaceDescription* Arena::CreateMaybeMessage<::ns3opengym::SpaceDescription>(Arena*);
template<> ::ns3opengym::TupleDataContainer* Arena::CreateMaybeMessage<::ns3opengym::TupleDataContainer>(Arena*);
template<> ::ns3opengym::TupleSpace* Arena::CreateMaybeMessage<::ns3opengym::TupleSpace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ns3opengym {

enum EnvStateMsg_Reason : int {
  EnvStateMsg_Reason_SimulationEnd = 0,
  EnvStateMsg_Reason_GameOver = 1,
  EnvStateMsg_Reason_EnvStateMsg_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnvStateMsg_Reason_EnvStateMsg_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnvStateMsg_Reason_IsValid(int value);
constexpr EnvStateMsg_Reason EnvStateMsg_Reason_Reason_MIN = EnvStateMsg_Reason_SimulationEnd;
constexpr EnvStateMsg_Reason EnvStateMsg_Reason_Reason_MAX = EnvStateMsg_Reason_GameOver;
constexpr int EnvStateMsg_Reason_Reason_ARRAYSIZE = EnvStateMsg_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvStateMsg_Reason_descriptor();
template<typename T>
inline const std::string& EnvStateMsg_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvStateMsg_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvStateMsg_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvStateMsg_Reason_descriptor(), enum_t_value);
}
inline bool EnvStateMsg_Reason_Parse(
    const std::string& name, EnvStateMsg_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvStateMsg_Reason>(
    EnvStateMsg_Reason_descriptor(), name, value);
}
enum MsgType : int {
  Unknown = 0,
  Init = 1,
  ActionSpace = 2,
  ObservationSpace = 3,
  IsGameOver = 4,
  Observation = 5,
  Reward = 6,
  ExtraInfo = 7,
  Action = 8,
  StopEnv = 9,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = Unknown;
constexpr MsgType MsgType_MAX = StopEnv;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum SpaceType : int {
  NoSpaceType = 0,
  Discrete = 1,
  Box = 2,
  Tuple = 3,
  Dict = 4,
  SpaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpaceType_IsValid(int value);
constexpr SpaceType SpaceType_MIN = NoSpaceType;
constexpr SpaceType SpaceType_MAX = Dict;
constexpr int SpaceType_ARRAYSIZE = SpaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpaceType_descriptor();
template<typename T>
inline const std::string& SpaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpaceType_descriptor(), enum_t_value);
}
inline bool SpaceType_Parse(
    const std::string& name, SpaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpaceType>(
    SpaceType_descriptor(), name, value);
}
enum Dtype : int {
  NoDType = 0,
  INT = 1,
  UINT = 2,
  FLOAT = 3,
  DOUBLE = 4,
  Dtype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Dtype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Dtype_IsValid(int value);
constexpr Dtype Dtype_MIN = NoDType;
constexpr Dtype Dtype_MAX = DOUBLE;
constexpr int Dtype_ARRAYSIZE = Dtype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dtype_descriptor();
template<typename T>
inline const std::string& Dtype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dtype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dtype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dtype_descriptor(), enum_t_value);
}
inline bool Dtype_Parse(
    const std::string& name, Dtype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dtype>(
    Dtype_descriptor(), name, value);
}
// ===================================================================

class SpaceDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.SpaceDescription) */ {
 public:
  SpaceDescription();
  virtual ~SpaceDescription();

  SpaceDescription(const SpaceDescription& from);
  SpaceDescription(SpaceDescription&& from) noexcept
    : SpaceDescription() {
    *this = ::std::move(from);
  }

  inline SpaceDescription& operator=(const SpaceDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpaceDescription& operator=(SpaceDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpaceDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpaceDescription* internal_default_instance() {
    return reinterpret_cast<const SpaceDescription*>(
               &_SpaceDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpaceDescription& a, SpaceDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(SpaceDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpaceDescription* New() const final {
    return CreateMaybeMessage<SpaceDescription>(nullptr);
  }

  SpaceDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpaceDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpaceDescription& from);
  void MergeFrom(const SpaceDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpaceDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.SpaceDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kSpaceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any space = 2;
  bool has_space() const;
  private:
  bool _internal_has_space() const;
  public:
  void clear_space();
  const PROTOBUF_NAMESPACE_ID::Any& space() const;
  PROTOBUF_NAMESPACE_ID::Any* release_space();
  PROTOBUF_NAMESPACE_ID::Any* mutable_space();
  void set_allocated_space(PROTOBUF_NAMESPACE_ID::Any* space);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_space() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_space();
  public:

  // .ns3opengym.SpaceType type = 1;
  void clear_type();
  ::ns3opengym::SpaceType type() const;
  void set_type(::ns3opengym::SpaceType value);
  private:
  ::ns3opengym::SpaceType _internal_type() const;
  void _internal_set_type(::ns3opengym::SpaceType value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.SpaceDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* space_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DiscreteSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DiscreteSpace) */ {
 public:
  DiscreteSpace();
  virtual ~DiscreteSpace();

  DiscreteSpace(const DiscreteSpace& from);
  DiscreteSpace(DiscreteSpace&& from) noexcept
    : DiscreteSpace() {
    *this = ::std::move(from);
  }

  inline DiscreteSpace& operator=(const DiscreteSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteSpace& operator=(DiscreteSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscreteSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscreteSpace* internal_default_instance() {
    return reinterpret_cast<const DiscreteSpace*>(
               &_DiscreteSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DiscreteSpace& a, DiscreteSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscreteSpace* New() const final {
    return CreateMaybeMessage<DiscreteSpace>(nullptr);
  }

  DiscreteSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscreteSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscreteSpace& from);
  void MergeFrom(const DiscreteSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.DiscreteSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
  };
  // int32 n = 1;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::int32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.DiscreteSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class BoxSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.BoxSpace) */ {
 public:
  BoxSpace();
  virtual ~BoxSpace();

  BoxSpace(const BoxSpace& from);
  BoxSpace(BoxSpace&& from) noexcept
    : BoxSpace() {
    *this = ::std::move(from);
  }

  inline BoxSpace& operator=(const BoxSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxSpace& operator=(BoxSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoxSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoxSpace* internal_default_instance() {
    return reinterpret_cast<const BoxSpace*>(
               &_BoxSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BoxSpace& a, BoxSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxSpace* New() const final {
    return CreateMaybeMessage<BoxSpace>(nullptr);
  }

  BoxSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxSpace& from);
  void MergeFrom(const BoxSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.BoxSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 4,
    kLowFieldNumber = 1,
    kHighFieldNumber = 2,
    kDtypeFieldNumber = 3,
  };
  // repeated uint32 shape = 4;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // float low = 1;
  void clear_low();
  float low() const;
  void set_low(float value);
  private:
  float _internal_low() const;
  void _internal_set_low(float value);
  public:

  // float high = 2;
  void clear_high();
  float high() const;
  void set_high(float value);
  private:
  float _internal_high() const;
  void _internal_set_high(float value);
  public:

  // .ns3opengym.Dtype dtype = 3;
  void clear_dtype();
  ::ns3opengym::Dtype dtype() const;
  void set_dtype(::ns3opengym::Dtype value);
  private:
  ::ns3opengym::Dtype _internal_dtype() const;
  void _internal_set_dtype(::ns3opengym::Dtype value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.BoxSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  float low_;
  float high_;
  int dtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TupleSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.TupleSpace) */ {
 public:
  TupleSpace();
  virtual ~TupleSpace();

  TupleSpace(const TupleSpace& from);
  TupleSpace(TupleSpace&& from) noexcept
    : TupleSpace() {
    *this = ::std::move(from);
  }

  inline TupleSpace& operator=(const TupleSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline TupleSpace& operator=(TupleSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TupleSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TupleSpace* internal_default_instance() {
    return reinterpret_cast<const TupleSpace*>(
               &_TupleSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TupleSpace& a, TupleSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(TupleSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TupleSpace* New() const final {
    return CreateMaybeMessage<TupleSpace>(nullptr);
  }

  TupleSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TupleSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TupleSpace& from);
  void MergeFrom(const TupleSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TupleSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.TupleSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .ns3opengym.SpaceDescription element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::ns3opengym::SpaceDescription* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
      mutable_element();
  private:
  const ::ns3opengym::SpaceDescription& _internal_element(int index) const;
  ::ns3opengym::SpaceDescription* _internal_add_element();
  public:
  const ::ns3opengym::SpaceDescription& element(int index) const;
  ::ns3opengym::SpaceDescription* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
      element() const;

  // @@protoc_insertion_point(class_scope:ns3opengym.TupleSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DictSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DictSpace) */ {
 public:
  DictSpace();
  virtual ~DictSpace();

  DictSpace(const DictSpace& from);
  DictSpace(DictSpace&& from) noexcept
    : DictSpace() {
    *this = ::std::move(from);
  }

  inline DictSpace& operator=(const DictSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictSpace& operator=(DictSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DictSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DictSpace* internal_default_instance() {
    return reinterpret_cast<const DictSpace*>(
               &_DictSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DictSpace& a, DictSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(DictSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DictSpace* New() const final {
    return CreateMaybeMessage<DictSpace>(nullptr);
  }

  DictSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DictSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DictSpace& from);
  void MergeFrom(const DictSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.DictSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .ns3opengym.SpaceDescription element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::ns3opengym::SpaceDescription* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
      mutable_element();
  private:
  const ::ns3opengym::SpaceDescription& _internal_element(int index) const;
  ::ns3opengym::SpaceDescription* _internal_add_element();
  public:
  const ::ns3opengym::SpaceDescription& element(int index) const;
  ::ns3opengym::SpaceDescription* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
      element() const;

  // @@protoc_insertion_point(class_scope:ns3opengym.DictSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DataContainer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DataContainer) */ {
 public:
  DataContainer();
  virtual ~DataContainer();

  DataContainer(const DataContainer& from);
  DataContainer(DataContainer&& from) noexcept
    : DataContainer() {
    *this = ::std::move(from);
  }

  inline DataContainer& operator=(const DataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataContainer& operator=(DataContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataContainer* internal_default_instance() {
    return reinterpret_cast<const DataContainer*>(
               &_DataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DataContainer& a, DataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(DataContainer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataContainer* New() const final {
    return CreateMaybeMessage<DataContainer>(nullptr);
  }

  DataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataContainer& from);
  void MergeFrom(const DataContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.DataContainer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:

  // .ns3opengym.SpaceType type = 1;
  void clear_type();
  ::ns3opengym::SpaceType type() const;
  void set_type(::ns3opengym::SpaceType value);
  private:
  ::ns3opengym::SpaceType _internal_type() const;
  void _internal_set_type(::ns3opengym::SpaceType value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.DataContainer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DiscreteDataContainer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DiscreteDataContainer) */ {
 public:
  DiscreteDataContainer();
  virtual ~DiscreteDataContainer();

  DiscreteDataContainer(const DiscreteDataContainer& from);
  DiscreteDataContainer(DiscreteDataContainer&& from) noexcept
    : DiscreteDataContainer() {
    *this = ::std::move(from);
  }

  inline DiscreteDataContainer& operator=(const DiscreteDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteDataContainer& operator=(DiscreteDataContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscreteDataContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscreteDataContainer* internal_default_instance() {
    return reinterpret_cast<const DiscreteDataContainer*>(
               &_DiscreteDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DiscreteDataContainer& a, DiscreteDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteDataContainer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscreteDataContainer* New() const final {
    return CreateMaybeMessage<DiscreteDataContainer>(nullptr);
  }

  DiscreteDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscreteDataContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscreteDataContainer& from);
  void MergeFrom(const DiscreteDataContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteDataContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.DiscreteDataContainer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // int32 data = 1;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int32 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.DiscreteDataContainer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class BoxDataContainer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.BoxDataContainer) */ {
 public:
  BoxDataContainer();
  virtual ~BoxDataContainer();

  BoxDataContainer(const BoxDataContainer& from);
  BoxDataContainer(BoxDataContainer&& from) noexcept
    : BoxDataContainer() {
    *this = ::std::move(from);
  }

  inline BoxDataContainer& operator=(const BoxDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxDataContainer& operator=(BoxDataContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoxDataContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoxDataContainer* internal_default_instance() {
    return reinterpret_cast<const BoxDataContainer*>(
               &_BoxDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BoxDataContainer& a, BoxDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxDataContainer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxDataContainer* New() const final {
    return CreateMaybeMessage<BoxDataContainer>(nullptr);
  }

  BoxDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxDataContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxDataContainer& from);
  void MergeFrom(const BoxDataContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxDataContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.BoxDataContainer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kIntDataFieldNumber = 3,
    kUintDataFieldNumber = 4,
    kFloatDataFieldNumber = 5,
    kDoubleDataFieldNumber = 6,
    kDtypeFieldNumber = 1,
  };
  // repeated uint32 shape = 2;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // repeated int32 intData = 3;
  int intdata_size() const;
  private:
  int _internal_intdata_size() const;
  public:
  void clear_intdata();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intdata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intdata() const;
  void _internal_add_intdata(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intdata();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intdata(int index) const;
  void set_intdata(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intdata(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intdata();

  // repeated uint32 uintData = 4;
  int uintdata_size() const;
  private:
  int _internal_uintdata_size() const;
  public:
  void clear_uintdata();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uintdata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_uintdata() const;
  void _internal_add_uintdata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_uintdata();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 uintdata(int index) const;
  void set_uintdata(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_uintdata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      uintdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_uintdata();

  // repeated float floatData = 5;
  int floatdata_size() const;
  private:
  int _internal_floatdata_size() const;
  public:
  void clear_floatdata();
  private:
  float _internal_floatdata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floatdata() const;
  void _internal_add_floatdata(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floatdata();
  public:
  float floatdata(int index) const;
  void set_floatdata(int index, float value);
  void add_floatdata(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floatdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floatdata();

  // repeated double doubleData = 6;
  int doubledata_size() const;
  private:
  int _internal_doubledata_size() const;
  public:
  void clear_doubledata();
  private:
  double _internal_doubledata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_doubledata() const;
  void _internal_add_doubledata(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_doubledata();
  public:
  double doubledata(int index) const;
  void set_doubledata(int index, double value);
  void add_doubledata(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      doubledata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_doubledata();

  // .ns3opengym.Dtype dtype = 1;
  void clear_dtype();
  ::ns3opengym::Dtype dtype() const;
  void set_dtype(::ns3opengym::Dtype value);
  private:
  ::ns3opengym::Dtype _internal_dtype() const;
  void _internal_set_dtype(::ns3opengym::Dtype value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.BoxDataContainer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intdata_;
  mutable std::atomic<int> _intdata_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > uintdata_;
  mutable std::atomic<int> _uintdata_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floatdata_;
  mutable std::atomic<int> _floatdata_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > doubledata_;
  mutable std::atomic<int> _doubledata_cached_byte_size_;
  int dtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TupleDataContainer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.TupleDataContainer) */ {
 public:
  TupleDataContainer();
  virtual ~TupleDataContainer();

  TupleDataContainer(const TupleDataContainer& from);
  TupleDataContainer(TupleDataContainer&& from) noexcept
    : TupleDataContainer() {
    *this = ::std::move(from);
  }

  inline TupleDataContainer& operator=(const TupleDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TupleDataContainer& operator=(TupleDataContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TupleDataContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TupleDataContainer* internal_default_instance() {
    return reinterpret_cast<const TupleDataContainer*>(
               &_TupleDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TupleDataContainer& a, TupleDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(TupleDataContainer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TupleDataContainer* New() const final {
    return CreateMaybeMessage<TupleDataContainer>(nullptr);
  }

  TupleDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TupleDataContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TupleDataContainer& from);
  void MergeFrom(const TupleDataContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TupleDataContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.TupleDataContainer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .ns3opengym.DataContainer element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::ns3opengym::DataContainer* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer >*
      mutable_element();
  private:
  const ::ns3opengym::DataContainer& _internal_element(int index) const;
  ::ns3opengym::DataContainer* _internal_add_element();
  public:
  const ::ns3opengym::DataContainer& element(int index) const;
  ::ns3opengym::DataContainer* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer >&
      element() const;

  // @@protoc_insertion_point(class_scope:ns3opengym.TupleDataContainer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DictDataContainer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DictDataContainer) */ {
 public:
  DictDataContainer();
  virtual ~DictDataContainer();

  DictDataContainer(const DictDataContainer& from);
  DictDataContainer(DictDataContainer&& from) noexcept
    : DictDataContainer() {
    *this = ::std::move(from);
  }

  inline DictDataContainer& operator=(const DictDataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictDataContainer& operator=(DictDataContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DictDataContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DictDataContainer* internal_default_instance() {
    return reinterpret_cast<const DictDataContainer*>(
               &_DictDataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DictDataContainer& a, DictDataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(DictDataContainer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DictDataContainer* New() const final {
    return CreateMaybeMessage<DictDataContainer>(nullptr);
  }

  DictDataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DictDataContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DictDataContainer& from);
  void MergeFrom(const DictDataContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictDataContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.DictDataContainer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .ns3opengym.DataContainer element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::ns3opengym::DataContainer* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer >*
      mutable_element();
  private:
  const ::ns3opengym::DataContainer& _internal_element(int index) const;
  ::ns3opengym::DataContainer* _internal_add_element();
  public:
  const ::ns3opengym::DataContainer& element(int index) const;
  ::ns3opengym::DataContainer* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer >&
      element() const;

  // @@protoc_insertion_point(class_scope:ns3opengym.DictDataContainer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SimInitMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.SimInitMsg) */ {
 public:
  SimInitMsg();
  virtual ~SimInitMsg();

  SimInitMsg(const SimInitMsg& from);
  SimInitMsg(SimInitMsg&& from) noexcept
    : SimInitMsg() {
    *this = ::std::move(from);
  }

  inline SimInitMsg& operator=(const SimInitMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimInitMsg& operator=(SimInitMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimInitMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimInitMsg* internal_default_instance() {
    return reinterpret_cast<const SimInitMsg*>(
               &_SimInitMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SimInitMsg& a, SimInitMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SimInitMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimInitMsg* New() const final {
    return CreateMaybeMessage<SimInitMsg>(nullptr);
  }

  SimInitMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimInitMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimInitMsg& from);
  void MergeFrom(const SimInitMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimInitMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.SimInitMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObsSpaceFieldNumber = 3,
    kActSpaceFieldNumber = 4,
    kSimProcessIdFieldNumber = 1,
    kWafShellProcessIdFieldNumber = 2,
  };
  // .ns3opengym.SpaceDescription obsSpace = 3;
  bool has_obsspace() const;
  private:
  bool _internal_has_obsspace() const;
  public:
  void clear_obsspace();
  const ::ns3opengym::SpaceDescription& obsspace() const;
  ::ns3opengym::SpaceDescription* release_obsspace();
  ::ns3opengym::SpaceDescription* mutable_obsspace();
  void set_allocated_obsspace(::ns3opengym::SpaceDescription* obsspace);
  private:
  const ::ns3opengym::SpaceDescription& _internal_obsspace() const;
  ::ns3opengym::SpaceDescription* _internal_mutable_obsspace();
  public:

  // .ns3opengym.SpaceDescription actSpace = 4;
  bool has_actspace() const;
  private:
  bool _internal_has_actspace() const;
  public:
  void clear_actspace();
  const ::ns3opengym::SpaceDescription& actspace() const;
  ::ns3opengym::SpaceDescription* release_actspace();
  ::ns3opengym::SpaceDescription* mutable_actspace();
  void set_allocated_actspace(::ns3opengym::SpaceDescription* actspace);
  private:
  const ::ns3opengym::SpaceDescription& _internal_actspace() const;
  ::ns3opengym::SpaceDescription* _internal_mutable_actspace();
  public:

  // uint64 simProcessId = 1;
  void clear_simprocessid();
  ::PROTOBUF_NAMESPACE_ID::uint64 simprocessid() const;
  void set_simprocessid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_simprocessid() const;
  void _internal_set_simprocessid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 wafShellProcessId = 2;
  void clear_wafshellprocessid();
  ::PROTOBUF_NAMESPACE_ID::uint64 wafshellprocessid() const;
  void set_wafshellprocessid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_wafshellprocessid() const;
  void _internal_set_wafshellprocessid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.SimInitMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ns3opengym::SpaceDescription* obsspace_;
  ::ns3opengym::SpaceDescription* actspace_;
  ::PROTOBUF_NAMESPACE_ID::uint64 simprocessid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 wafshellprocessid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SimInitAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.SimInitAck) */ {
 public:
  SimInitAck();
  virtual ~SimInitAck();

  SimInitAck(const SimInitAck& from);
  SimInitAck(SimInitAck&& from) noexcept
    : SimInitAck() {
    *this = ::std::move(from);
  }

  inline SimInitAck& operator=(const SimInitAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimInitAck& operator=(SimInitAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimInitAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimInitAck* internal_default_instance() {
    return reinterpret_cast<const SimInitAck*>(
               &_SimInitAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SimInitAck& a, SimInitAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SimInitAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimInitAck* New() const final {
    return CreateMaybeMessage<SimInitAck>(nullptr);
  }

  SimInitAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimInitAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimInitAck& from);
  void MergeFrom(const SimInitAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimInitAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.SimInitAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoneFieldNumber = 1,
    kStopSimReqFieldNumber = 2,
  };
  // bool done = 1;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // bool stopSimReq = 2;
  void clear_stopsimreq();
  bool stopsimreq() const;
  void set_stopsimreq(bool value);
  private:
  bool _internal_stopsimreq() const;
  void _internal_set_stopsimreq(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.SimInitAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool done_;
  bool stopsimreq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EnvStateMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.EnvStateMsg) */ {
 public:
  EnvStateMsg();
  virtual ~EnvStateMsg();

  EnvStateMsg(const EnvStateMsg& from);
  EnvStateMsg(EnvStateMsg&& from) noexcept
    : EnvStateMsg() {
    *this = ::std::move(from);
  }

  inline EnvStateMsg& operator=(const EnvStateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvStateMsg& operator=(EnvStateMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvStateMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvStateMsg* internal_default_instance() {
    return reinterpret_cast<const EnvStateMsg*>(
               &_EnvStateMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EnvStateMsg& a, EnvStateMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvStateMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvStateMsg* New() const final {
    return CreateMaybeMessage<EnvStateMsg>(nullptr);
  }

  EnvStateMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvStateMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvStateMsg& from);
  void MergeFrom(const EnvStateMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvStateMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.EnvStateMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnvStateMsg_Reason Reason;
  static constexpr Reason SimulationEnd =
    EnvStateMsg_Reason_SimulationEnd;
  static constexpr Reason GameOver =
    EnvStateMsg_Reason_GameOver;
  static inline bool Reason_IsValid(int value) {
    return EnvStateMsg_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    EnvStateMsg_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    EnvStateMsg_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    EnvStateMsg_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return EnvStateMsg_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return EnvStateMsg_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(const std::string& name,
      Reason* value) {
    return EnvStateMsg_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 5,
    kObsDataFieldNumber = 1,
    kRewardFieldNumber = 2,
    kIsGameOverFieldNumber = 3,
    kReasonFieldNumber = 4,
  };
  // string info = 5;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // .ns3opengym.DataContainer obsData = 1;
  bool has_obsdata() const;
  private:
  bool _internal_has_obsdata() const;
  public:
  void clear_obsdata();
  const ::ns3opengym::DataContainer& obsdata() const;
  ::ns3opengym::DataContainer* release_obsdata();
  ::ns3opengym::DataContainer* mutable_obsdata();
  void set_allocated_obsdata(::ns3opengym::DataContainer* obsdata);
  private:
  const ::ns3opengym::DataContainer& _internal_obsdata() const;
  ::ns3opengym::DataContainer* _internal_mutable_obsdata();
  public:

  // float reward = 2;
  void clear_reward();
  float reward() const;
  void set_reward(float value);
  private:
  float _internal_reward() const;
  void _internal_set_reward(float value);
  public:

  // bool isGameOver = 3;
  void clear_isgameover();
  bool isgameover() const;
  void set_isgameover(bool value);
  private:
  bool _internal_isgameover() const;
  void _internal_set_isgameover(bool value);
  public:

  // .ns3opengym.EnvStateMsg.Reason reason = 4;
  void clear_reason();
  ::ns3opengym::EnvStateMsg_Reason reason() const;
  void set_reason(::ns3opengym::EnvStateMsg_Reason value);
  private:
  ::ns3opengym::EnvStateMsg_Reason _internal_reason() const;
  void _internal_set_reason(::ns3opengym::EnvStateMsg_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.EnvStateMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::ns3opengym::DataContainer* obsdata_;
  float reward_;
  bool isgameover_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EnvActMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3opengym.EnvActMsg) */ {
 public:
  EnvActMsg();
  virtual ~EnvActMsg();

  EnvActMsg(const EnvActMsg& from);
  EnvActMsg(EnvActMsg&& from) noexcept
    : EnvActMsg() {
    *this = ::std::move(from);
  }

  inline EnvActMsg& operator=(const EnvActMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvActMsg& operator=(EnvActMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvActMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvActMsg* internal_default_instance() {
    return reinterpret_cast<const EnvActMsg*>(
               &_EnvActMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EnvActMsg& a, EnvActMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvActMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvActMsg* New() const final {
    return CreateMaybeMessage<EnvActMsg>(nullptr);
  }

  EnvActMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvActMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvActMsg& from);
  void MergeFrom(const EnvActMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvActMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3opengym.EnvActMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActDataFieldNumber = 1,
    kStopSimReqFieldNumber = 2,
  };
  // .ns3opengym.DataContainer actData = 1;
  bool has_actdata() const;
  private:
  bool _internal_has_actdata() const;
  public:
  void clear_actdata();
  const ::ns3opengym::DataContainer& actdata() const;
  ::ns3opengym::DataContainer* release_actdata();
  ::ns3opengym::DataContainer* mutable_actdata();
  void set_allocated_actdata(::ns3opengym::DataContainer* actdata);
  private:
  const ::ns3opengym::DataContainer& _internal_actdata() const;
  ::ns3opengym::DataContainer* _internal_mutable_actdata();
  public:

  // bool stopSimReq = 2;
  void clear_stopsimreq();
  bool stopsimreq() const;
  void set_stopsimreq(bool value);
  private:
  bool _internal_stopsimreq() const;
  void _internal_set_stopsimreq(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ns3opengym.EnvActMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ns3opengym::DataContainer* actdata_;
  bool stopsimreq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpaceDescription

// .ns3opengym.SpaceType type = 1;
inline void SpaceDescription::clear_type() {
  type_ = 0;
}
inline ::ns3opengym::SpaceType SpaceDescription::_internal_type() const {
  return static_cast< ::ns3opengym::SpaceType >(type_);
}
inline ::ns3opengym::SpaceType SpaceDescription::type() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.type)
  return _internal_type();
}
inline void SpaceDescription::_internal_set_type(::ns3opengym::SpaceType value) {
  
  type_ = value;
}
inline void SpaceDescription::set_type(::ns3opengym::SpaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ns3opengym.SpaceDescription.type)
}

// .google.protobuf.Any space = 2;
inline bool SpaceDescription::_internal_has_space() const {
  return this != internal_default_instance() && space_ != nullptr;
}
inline bool SpaceDescription::has_space() const {
  return _internal_has_space();
}
inline const PROTOBUF_NAMESPACE_ID::Any& SpaceDescription::_internal_space() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = space_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& SpaceDescription::space() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.space)
  return _internal_space();
}
inline PROTOBUF_NAMESPACE_ID::Any* SpaceDescription::release_space() {
  // @@protoc_insertion_point(field_release:ns3opengym.SpaceDescription.space)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = space_;
  space_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* SpaceDescription::_internal_mutable_space() {
  
  if (space_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    space_ = p;
  }
  return space_;
}
inline PROTOBUF_NAMESPACE_ID::Any* SpaceDescription::mutable_space() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.SpaceDescription.space)
  return _internal_mutable_space();
}
inline void SpaceDescription::set_allocated_space(PROTOBUF_NAMESPACE_ID::Any* space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(space_);
  }
  if (space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, space, submessage_arena);
    }
    
  } else {
    
  }
  space_ = space;
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SpaceDescription.space)
}

// string name = 3;
inline void SpaceDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDescription::name() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.name)
  return _internal_name();
}
inline void SpaceDescription::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ns3opengym.SpaceDescription.name)
}
inline std::string* SpaceDescription::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.SpaceDescription.name)
  return _internal_mutable_name();
}
inline const std::string& SpaceDescription::_internal_name() const {
  return name_.GetNoArena();
}
inline void SpaceDescription::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDescription::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ns3opengym.SpaceDescription.name)
}
inline void SpaceDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.SpaceDescription.name)
}
inline void SpaceDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.SpaceDescription.name)
}
inline std::string* SpaceDescription::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDescription::release_name() {
  // @@protoc_insertion_point(field_release:ns3opengym.SpaceDescription.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SpaceDescription.name)
}

// -------------------------------------------------------------------

// DiscreteSpace

// int32 n = 1;
inline void DiscreteSpace::clear_n() {
  n_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscreteSpace::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscreteSpace::n() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DiscreteSpace.n)
  return _internal_n();
}
inline void DiscreteSpace::_internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_ = value;
}
inline void DiscreteSpace::set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:ns3opengym.DiscreteSpace.n)
}

// -------------------------------------------------------------------

// BoxSpace

// float low = 1;
inline void BoxSpace::clear_low() {
  low_ = 0;
}
inline float BoxSpace::_internal_low() const {
  return low_;
}
inline float BoxSpace::low() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.low)
  return _internal_low();
}
inline void BoxSpace::_internal_set_low(float value) {
  
  low_ = value;
}
inline void BoxSpace::set_low(float value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.low)
}

// float high = 2;
inline void BoxSpace::clear_high() {
  high_ = 0;
}
inline float BoxSpace::_internal_high() const {
  return high_;
}
inline float BoxSpace::high() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.high)
  return _internal_high();
}
inline void BoxSpace::_internal_set_high(float value) {
  
  high_ = value;
}
inline void BoxSpace::set_high(float value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.high)
}

// .ns3opengym.Dtype dtype = 3;
inline void BoxSpace::clear_dtype() {
  dtype_ = 0;
}
inline ::ns3opengym::Dtype BoxSpace::_internal_dtype() const {
  return static_cast< ::ns3opengym::Dtype >(dtype_);
}
inline ::ns3opengym::Dtype BoxSpace::dtype() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.dtype)
  return _internal_dtype();
}
inline void BoxSpace::_internal_set_dtype(::ns3opengym::Dtype value) {
  
  dtype_ = value;
}
inline void BoxSpace::set_dtype(::ns3opengym::Dtype value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.dtype)
}

// repeated uint32 shape = 4;
inline int BoxSpace::_internal_shape_size() const {
  return shape_.size();
}
inline int BoxSpace::shape_size() const {
  return _internal_shape_size();
}
inline void BoxSpace::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoxSpace::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoxSpace::shape(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.shape)
  return _internal_shape(index);
}
inline void BoxSpace::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.shape)
}
inline void BoxSpace::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
}
inline void BoxSpace::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxSpace.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BoxSpace::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BoxSpace::shape() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxSpace.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BoxSpace::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BoxSpace::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxSpace.shape)
  return _internal_mutable_shape();
}

// -------------------------------------------------------------------

// TupleSpace

// repeated .ns3opengym.SpaceDescription element = 1;
inline int TupleSpace::_internal_element_size() const {
  return element_.size();
}
inline int TupleSpace::element_size() const {
  return _internal_element_size();
}
inline void TupleSpace::clear_element() {
  element_.Clear();
}
inline ::ns3opengym::SpaceDescription* TupleSpace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.TupleSpace.element)
  return element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
TupleSpace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.TupleSpace.element)
  return &element_;
}
inline const ::ns3opengym::SpaceDescription& TupleSpace::_internal_element(int index) const {
  return element_.Get(index);
}
inline const ::ns3opengym::SpaceDescription& TupleSpace::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.TupleSpace.element)
  return _internal_element(index);
}
inline ::ns3opengym::SpaceDescription* TupleSpace::_internal_add_element() {
  return element_.Add();
}
inline ::ns3opengym::SpaceDescription* TupleSpace::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.TupleSpace.element)
  return _internal_add_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
TupleSpace::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.TupleSpace.element)
  return element_;
}

// -------------------------------------------------------------------

// DictSpace

// repeated .ns3opengym.SpaceDescription element = 1;
inline int DictSpace::_internal_element_size() const {
  return element_.size();
}
inline int DictSpace::element_size() const {
  return _internal_element_size();
}
inline void DictSpace::clear_element() {
  element_.Clear();
}
inline ::ns3opengym::SpaceDescription* DictSpace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.DictSpace.element)
  return element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
DictSpace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.DictSpace.element)
  return &element_;
}
inline const ::ns3opengym::SpaceDescription& DictSpace::_internal_element(int index) const {
  return element_.Get(index);
}
inline const ::ns3opengym::SpaceDescription& DictSpace::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.DictSpace.element)
  return _internal_element(index);
}
inline ::ns3opengym::SpaceDescription* DictSpace::_internal_add_element() {
  return element_.Add();
}
inline ::ns3opengym::SpaceDescription* DictSpace::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.DictSpace.element)
  return _internal_add_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
DictSpace::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.DictSpace.element)
  return element_;
}

// -------------------------------------------------------------------

// DataContainer

// .ns3opengym.SpaceType type = 1;
inline void DataContainer::clear_type() {
  type_ = 0;
}
inline ::ns3opengym::SpaceType DataContainer::_internal_type() const {
  return static_cast< ::ns3opengym::SpaceType >(type_);
}
inline ::ns3opengym::SpaceType DataContainer::type() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.type)
  return _internal_type();
}
inline void DataContainer::_internal_set_type(::ns3opengym::SpaceType value) {
  
  type_ = value;
}
inline void DataContainer::set_type(::ns3opengym::SpaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ns3opengym.DataContainer.type)
}

// .google.protobuf.Any data = 2;
inline bool DataContainer::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool DataContainer::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& DataContainer::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& DataContainer::data() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.data)
  return _internal_data();
}
inline PROTOBUF_NAMESPACE_ID::Any* DataContainer::release_data() {
  // @@protoc_insertion_point(field_release:ns3opengym.DataContainer.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* DataContainer::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* DataContainer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.DataContainer.data)
  return _internal_mutable_data();
}
inline void DataContainer::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.DataContainer.data)
}

// string name = 3;
inline void DataContainer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataContainer::name() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.name)
  return _internal_name();
}
inline void DataContainer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ns3opengym.DataContainer.name)
}
inline std::string* DataContainer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.DataContainer.name)
  return _internal_mutable_name();
}
inline const std::string& DataContainer::_internal_name() const {
  return name_.GetNoArena();
}
inline void DataContainer::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataContainer::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ns3opengym.DataContainer.name)
}
inline void DataContainer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.DataContainer.name)
}
inline void DataContainer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.DataContainer.name)
}
inline std::string* DataContainer::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataContainer::release_name() {
  // @@protoc_insertion_point(field_release:ns3opengym.DataContainer.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataContainer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.DataContainer.name)
}

// -------------------------------------------------------------------

// DiscreteDataContainer

// int32 data = 1;
inline void DiscreteDataContainer::clear_data() {
  data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscreteDataContainer::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscreteDataContainer::data() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DiscreteDataContainer.data)
  return _internal_data();
}
inline void DiscreteDataContainer::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_ = value;
}
inline void DiscreteDataContainer::set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ns3opengym.DiscreteDataContainer.data)
}

// -------------------------------------------------------------------

// BoxDataContainer

// .ns3opengym.Dtype dtype = 1;
inline void BoxDataContainer::clear_dtype() {
  dtype_ = 0;
}
inline ::ns3opengym::Dtype BoxDataContainer::_internal_dtype() const {
  return static_cast< ::ns3opengym::Dtype >(dtype_);
}
inline ::ns3opengym::Dtype BoxDataContainer::dtype() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.dtype)
  return _internal_dtype();
}
inline void BoxDataContainer::_internal_set_dtype(::ns3opengym::Dtype value) {
  
  dtype_ = value;
}
inline void BoxDataContainer::set_dtype(::ns3opengym::Dtype value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.dtype)
}

// repeated uint32 shape = 2;
inline int BoxDataContainer::_internal_shape_size() const {
  return shape_.size();
}
inline int BoxDataContainer::shape_size() const {
  return _internal_shape_size();
}
inline void BoxDataContainer::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoxDataContainer::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoxDataContainer::shape(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.shape)
  return _internal_shape(index);
}
inline void BoxDataContainer::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.shape)
}
inline void BoxDataContainer::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
}
inline void BoxDataContainer::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BoxDataContainer::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BoxDataContainer::shape() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BoxDataContainer::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BoxDataContainer::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.shape)
  return _internal_mutable_shape();
}

// repeated int32 intData = 3;
inline int BoxDataContainer::_internal_intdata_size() const {
  return intdata_.size();
}
inline int BoxDataContainer::intdata_size() const {
  return _internal_intdata_size();
}
inline void BoxDataContainer::clear_intdata() {
  intdata_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDataContainer::_internal_intdata(int index) const {
  return intdata_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDataContainer::intdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.intData)
  return _internal_intdata(index);
}
inline void BoxDataContainer::set_intdata(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.intData)
}
inline void BoxDataContainer::_internal_add_intdata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intdata_.Add(value);
}
inline void BoxDataContainer::add_intdata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intdata(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.intData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BoxDataContainer::_internal_intdata() const {
  return intdata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BoxDataContainer::intdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.intData)
  return _internal_intdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BoxDataContainer::_internal_mutable_intdata() {
  return &intdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BoxDataContainer::mutable_intdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.intData)
  return _internal_mutable_intdata();
}

// repeated uint32 uintData = 4;
inline int BoxDataContainer::_internal_uintdata_size() const {
  return uintdata_.size();
}
inline int BoxDataContainer::uintdata_size() const {
  return _internal_uintdata_size();
}
inline void BoxDataContainer::clear_uintdata() {
  uintdata_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoxDataContainer::_internal_uintdata(int index) const {
  return uintdata_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoxDataContainer::uintdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.uintData)
  return _internal_uintdata(index);
}
inline void BoxDataContainer::set_uintdata(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uintdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.uintData)
}
inline void BoxDataContainer::_internal_add_uintdata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uintdata_.Add(value);
}
inline void BoxDataContainer::add_uintdata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_uintdata(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.uintData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BoxDataContainer::_internal_uintdata() const {
  return uintdata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BoxDataContainer::uintdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.uintData)
  return _internal_uintdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BoxDataContainer::_internal_mutable_uintdata() {
  return &uintdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BoxDataContainer::mutable_uintdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.uintData)
  return _internal_mutable_uintdata();
}

// repeated float floatData = 5;
inline int BoxDataContainer::_internal_floatdata_size() const {
  return floatdata_.size();
}
inline int BoxDataContainer::floatdata_size() const {
  return _internal_floatdata_size();
}
inline void BoxDataContainer::clear_floatdata() {
  floatdata_.Clear();
}
inline float BoxDataContainer::_internal_floatdata(int index) const {
  return floatdata_.Get(index);
}
inline float BoxDataContainer::floatdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.floatData)
  return _internal_floatdata(index);
}
inline void BoxDataContainer::set_floatdata(int index, float value) {
  floatdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.floatData)
}
inline void BoxDataContainer::_internal_add_floatdata(float value) {
  floatdata_.Add(value);
}
inline void BoxDataContainer::add_floatdata(float value) {
  _internal_add_floatdata(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.floatData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BoxDataContainer::_internal_floatdata() const {
  return floatdata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BoxDataContainer::floatdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.floatData)
  return _internal_floatdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BoxDataContainer::_internal_mutable_floatdata() {
  return &floatdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BoxDataContainer::mutable_floatdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.floatData)
  return _internal_mutable_floatdata();
}

// repeated double doubleData = 6;
inline int BoxDataContainer::_internal_doubledata_size() const {
  return doubledata_.size();
}
inline int BoxDataContainer::doubledata_size() const {
  return _internal_doubledata_size();
}
inline void BoxDataContainer::clear_doubledata() {
  doubledata_.Clear();
}
inline double BoxDataContainer::_internal_doubledata(int index) const {
  return doubledata_.Get(index);
}
inline double BoxDataContainer::doubledata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.doubleData)
  return _internal_doubledata(index);
}
inline void BoxDataContainer::set_doubledata(int index, double value) {
  doubledata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.doubleData)
}
inline void BoxDataContainer::_internal_add_doubledata(double value) {
  doubledata_.Add(value);
}
inline void BoxDataContainer::add_doubledata(double value) {
  _internal_add_doubledata(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.doubleData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BoxDataContainer::_internal_doubledata() const {
  return doubledata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BoxDataContainer::doubledata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.doubleData)
  return _internal_doubledata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BoxDataContainer::_internal_mutable_doubledata() {
  return &doubledata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BoxDataContainer::mutable_doubledata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.doubleData)
  return _internal_mutable_doubledata();
}

// -------------------------------------------------------------------

// TupleDataContainer

// repeated .ns3opengym.DataContainer element = 1;
inline int TupleDataContainer::_internal_element_size() const {
  return element_.size();
}
inline int TupleDataContainer::element_size() const {
  return _internal_element_size();
}
inline void TupleDataContainer::clear_element() {
  element_.Clear();
}
inline ::ns3opengym::DataContainer* TupleDataContainer::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.TupleDataContainer.element)
  return element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer >*
TupleDataContainer::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.TupleDataContainer.element)
  return &element_;
}
inline const ::ns3opengym::DataContainer& TupleDataContainer::_internal_element(int index) const {
  return element_.Get(index);
}
inline const ::ns3opengym::DataContainer& TupleDataContainer::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.TupleDataContainer.element)
  return _internal_element(index);
}
inline ::ns3opengym::DataContainer* TupleDataContainer::_internal_add_element() {
  return element_.Add();
}
inline ::ns3opengym::DataContainer* TupleDataContainer::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.TupleDataContainer.element)
  return _internal_add_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer >&
TupleDataContainer::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.TupleDataContainer.element)
  return element_;
}

// -------------------------------------------------------------------

// DictDataContainer

// repeated .ns3opengym.DataContainer element = 1;
inline int DictDataContainer::_internal_element_size() const {
  return element_.size();
}
inline int DictDataContainer::element_size() const {
  return _internal_element_size();
}
inline void DictDataContainer::clear_element() {
  element_.Clear();
}
inline ::ns3opengym::DataContainer* DictDataContainer::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.DictDataContainer.element)
  return element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer >*
DictDataContainer::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.DictDataContainer.element)
  return &element_;
}
inline const ::ns3opengym::DataContainer& DictDataContainer::_internal_element(int index) const {
  return element_.Get(index);
}
inline const ::ns3opengym::DataContainer& DictDataContainer::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.DictDataContainer.element)
  return _internal_element(index);
}
inline ::ns3opengym::DataContainer* DictDataContainer::_internal_add_element() {
  return element_.Add();
}
inline ::ns3opengym::DataContainer* DictDataContainer::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.DictDataContainer.element)
  return _internal_add_element();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3opengym::DataContainer >&
DictDataContainer::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.DictDataContainer.element)
  return element_;
}

// -------------------------------------------------------------------

// SimInitMsg

// uint64 simProcessId = 1;
inline void SimInitMsg::clear_simprocessid() {
  simprocessid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimInitMsg::_internal_simprocessid() const {
  return simprocessid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimInitMsg::simprocessid() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.simProcessId)
  return _internal_simprocessid();
}
inline void SimInitMsg::_internal_set_simprocessid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  simprocessid_ = value;
}
inline void SimInitMsg::set_simprocessid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_simprocessid(value);
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitMsg.simProcessId)
}

// uint64 wafShellProcessId = 2;
inline void SimInitMsg::clear_wafshellprocessid() {
  wafshellprocessid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimInitMsg::_internal_wafshellprocessid() const {
  return wafshellprocessid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimInitMsg::wafshellprocessid() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.wafShellProcessId)
  return _internal_wafshellprocessid();
}
inline void SimInitMsg::_internal_set_wafshellprocessid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  wafshellprocessid_ = value;
}
inline void SimInitMsg::set_wafshellprocessid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_wafshellprocessid(value);
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitMsg.wafShellProcessId)
}

// .ns3opengym.SpaceDescription obsSpace = 3;
inline bool SimInitMsg::_internal_has_obsspace() const {
  return this != internal_default_instance() && obsspace_ != nullptr;
}
inline bool SimInitMsg::has_obsspace() const {
  return _internal_has_obsspace();
}
inline void SimInitMsg::clear_obsspace() {
  if (GetArenaNoVirtual() == nullptr && obsspace_ != nullptr) {
    delete obsspace_;
  }
  obsspace_ = nullptr;
}
inline const ::ns3opengym::SpaceDescription& SimInitMsg::_internal_obsspace() const {
  const ::ns3opengym::SpaceDescription* p = obsspace_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ns3opengym::SpaceDescription*>(
      &::ns3opengym::_SpaceDescription_default_instance_);
}
inline const ::ns3opengym::SpaceDescription& SimInitMsg::obsspace() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.obsSpace)
  return _internal_obsspace();
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::release_obsspace() {
  // @@protoc_insertion_point(field_release:ns3opengym.SimInitMsg.obsSpace)
  
  ::ns3opengym::SpaceDescription* temp = obsspace_;
  obsspace_ = nullptr;
  return temp;
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::_internal_mutable_obsspace() {
  
  if (obsspace_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3opengym::SpaceDescription>(GetArenaNoVirtual());
    obsspace_ = p;
  }
  return obsspace_;
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::mutable_obsspace() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.SimInitMsg.obsSpace)
  return _internal_mutable_obsspace();
}
inline void SimInitMsg::set_allocated_obsspace(::ns3opengym::SpaceDescription* obsspace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obsspace_;
  }
  if (obsspace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obsspace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsspace, submessage_arena);
    }
    
  } else {
    
  }
  obsspace_ = obsspace;
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SimInitMsg.obsSpace)
}

// .ns3opengym.SpaceDescription actSpace = 4;
inline bool SimInitMsg::_internal_has_actspace() const {
  return this != internal_default_instance() && actspace_ != nullptr;
}
inline bool SimInitMsg::has_actspace() const {
  return _internal_has_actspace();
}
inline void SimInitMsg::clear_actspace() {
  if (GetArenaNoVirtual() == nullptr && actspace_ != nullptr) {
    delete actspace_;
  }
  actspace_ = nullptr;
}
inline const ::ns3opengym::SpaceDescription& SimInitMsg::_internal_actspace() const {
  const ::ns3opengym::SpaceDescription* p = actspace_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ns3opengym::SpaceDescription*>(
      &::ns3opengym::_SpaceDescription_default_instance_);
}
inline const ::ns3opengym::SpaceDescription& SimInitMsg::actspace() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.actSpace)
  return _internal_actspace();
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::release_actspace() {
  // @@protoc_insertion_point(field_release:ns3opengym.SimInitMsg.actSpace)
  
  ::ns3opengym::SpaceDescription* temp = actspace_;
  actspace_ = nullptr;
  return temp;
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::_internal_mutable_actspace() {
  
  if (actspace_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3opengym::SpaceDescription>(GetArenaNoVirtual());
    actspace_ = p;
  }
  return actspace_;
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::mutable_actspace() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.SimInitMsg.actSpace)
  return _internal_mutable_actspace();
}
inline void SimInitMsg::set_allocated_actspace(::ns3opengym::SpaceDescription* actspace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete actspace_;
  }
  if (actspace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actspace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actspace, submessage_arena);
    }
    
  } else {
    
  }
  actspace_ = actspace;
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SimInitMsg.actSpace)
}

// -------------------------------------------------------------------

// SimInitAck

// bool done = 1;
inline void SimInitAck::clear_done() {
  done_ = false;
}
inline bool SimInitAck::_internal_done() const {
  return done_;
}
inline bool SimInitAck::done() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitAck.done)
  return _internal_done();
}
inline void SimInitAck::_internal_set_done(bool value) {
  
  done_ = value;
}
inline void SimInitAck::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitAck.done)
}

// bool stopSimReq = 2;
inline void SimInitAck::clear_stopsimreq() {
  stopsimreq_ = false;
}
inline bool SimInitAck::_internal_stopsimreq() const {
  return stopsimreq_;
}
inline bool SimInitAck::stopsimreq() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitAck.stopSimReq)
  return _internal_stopsimreq();
}
inline void SimInitAck::_internal_set_stopsimreq(bool value) {
  
  stopsimreq_ = value;
}
inline void SimInitAck::set_stopsimreq(bool value) {
  _internal_set_stopsimreq(value);
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitAck.stopSimReq)
}

// -------------------------------------------------------------------

// EnvStateMsg

// .ns3opengym.DataContainer obsData = 1;
inline bool EnvStateMsg::_internal_has_obsdata() const {
  return this != internal_default_instance() && obsdata_ != nullptr;
}
inline bool EnvStateMsg::has_obsdata() const {
  return _internal_has_obsdata();
}
inline void EnvStateMsg::clear_obsdata() {
  if (GetArenaNoVirtual() == nullptr && obsdata_ != nullptr) {
    delete obsdata_;
  }
  obsdata_ = nullptr;
}
inline const ::ns3opengym::DataContainer& EnvStateMsg::_internal_obsdata() const {
  const ::ns3opengym::DataContainer* p = obsdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ns3opengym::DataContainer*>(
      &::ns3opengym::_DataContainer_default_instance_);
}
inline const ::ns3opengym::DataContainer& EnvStateMsg::obsdata() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.obsData)
  return _internal_obsdata();
}
inline ::ns3opengym::DataContainer* EnvStateMsg::release_obsdata() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvStateMsg.obsData)
  
  ::ns3opengym::DataContainer* temp = obsdata_;
  obsdata_ = nullptr;
  return temp;
}
inline ::ns3opengym::DataContainer* EnvStateMsg::_internal_mutable_obsdata() {
  
  if (obsdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3opengym::DataContainer>(GetArenaNoVirtual());
    obsdata_ = p;
  }
  return obsdata_;
}
inline ::ns3opengym::DataContainer* EnvStateMsg::mutable_obsdata() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvStateMsg.obsData)
  return _internal_mutable_obsdata();
}
inline void EnvStateMsg::set_allocated_obsdata(::ns3opengym::DataContainer* obsdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obsdata_;
  }
  if (obsdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obsdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsdata, submessage_arena);
    }
    
  } else {
    
  }
  obsdata_ = obsdata;
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvStateMsg.obsData)
}

// float reward = 2;
inline void EnvStateMsg::clear_reward() {
  reward_ = 0;
}
inline float EnvStateMsg::_internal_reward() const {
  return reward_;
}
inline float EnvStateMsg::reward() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.reward)
  return _internal_reward();
}
inline void EnvStateMsg::_internal_set_reward(float value) {
  
  reward_ = value;
}
inline void EnvStateMsg::set_reward(float value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.reward)
}

// bool isGameOver = 3;
inline void EnvStateMsg::clear_isgameover() {
  isgameover_ = false;
}
inline bool EnvStateMsg::_internal_isgameover() const {
  return isgameover_;
}
inline bool EnvStateMsg::isgameover() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.isGameOver)
  return _internal_isgameover();
}
inline void EnvStateMsg::_internal_set_isgameover(bool value) {
  
  isgameover_ = value;
}
inline void EnvStateMsg::set_isgameover(bool value) {
  _internal_set_isgameover(value);
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.isGameOver)
}

// .ns3opengym.EnvStateMsg.Reason reason = 4;
inline void EnvStateMsg::clear_reason() {
  reason_ = 0;
}
inline ::ns3opengym::EnvStateMsg_Reason EnvStateMsg::_internal_reason() const {
  return static_cast< ::ns3opengym::EnvStateMsg_Reason >(reason_);
}
inline ::ns3opengym::EnvStateMsg_Reason EnvStateMsg::reason() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.reason)
  return _internal_reason();
}
inline void EnvStateMsg::_internal_set_reason(::ns3opengym::EnvStateMsg_Reason value) {
  
  reason_ = value;
}
inline void EnvStateMsg::set_reason(::ns3opengym::EnvStateMsg_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.reason)
}

// string info = 5;
inline void EnvStateMsg::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnvStateMsg::info() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.info)
  return _internal_info();
}
inline void EnvStateMsg::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.info)
}
inline std::string* EnvStateMsg::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvStateMsg.info)
  return _internal_mutable_info();
}
inline const std::string& EnvStateMsg::_internal_info() const {
  return info_.GetNoArena();
}
inline void EnvStateMsg::_internal_set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnvStateMsg::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ns3opengym.EnvStateMsg.info)
}
inline void EnvStateMsg::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.EnvStateMsg.info)
}
inline void EnvStateMsg::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.EnvStateMsg.info)
}
inline std::string* EnvStateMsg::_internal_mutable_info() {
  
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnvStateMsg::release_info() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvStateMsg.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnvStateMsg::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvStateMsg.info)
}

// -------------------------------------------------------------------

// EnvActMsg

// .ns3opengym.DataContainer actData = 1;
inline bool EnvActMsg::_internal_has_actdata() const {
  return this != internal_default_instance() && actdata_ != nullptr;
}
inline bool EnvActMsg::has_actdata() const {
  return _internal_has_actdata();
}
inline void EnvActMsg::clear_actdata() {
  if (GetArenaNoVirtual() == nullptr && actdata_ != nullptr) {
    delete actdata_;
  }
  actdata_ = nullptr;
}
inline const ::ns3opengym::DataContainer& EnvActMsg::_internal_actdata() const {
  const ::ns3opengym::DataContainer* p = actdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ns3opengym::DataContainer*>(
      &::ns3opengym::_DataContainer_default_instance_);
}
inline const ::ns3opengym::DataContainer& EnvActMsg::actdata() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvActMsg.actData)
  return _internal_actdata();
}
inline ::ns3opengym::DataContainer* EnvActMsg::release_actdata() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvActMsg.actData)
  
  ::ns3opengym::DataContainer* temp = actdata_;
  actdata_ = nullptr;
  return temp;
}
inline ::ns3opengym::DataContainer* EnvActMsg::_internal_mutable_actdata() {
  
  if (actdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3opengym::DataContainer>(GetArenaNoVirtual());
    actdata_ = p;
  }
  return actdata_;
}
inline ::ns3opengym::DataContainer* EnvActMsg::mutable_actdata() {
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvActMsg.actData)
  return _internal_mutable_actdata();
}
inline void EnvActMsg::set_allocated_actdata(::ns3opengym::DataContainer* actdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete actdata_;
  }
  if (actdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actdata, submessage_arena);
    }
    
  } else {
    
  }
  actdata_ = actdata;
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvActMsg.actData)
}

// bool stopSimReq = 2;
inline void EnvActMsg::clear_stopsimreq() {
  stopsimreq_ = false;
}
inline bool EnvActMsg::_internal_stopsimreq() const {
  return stopsimreq_;
}
inline bool EnvActMsg::stopsimreq() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvActMsg.stopSimReq)
  return _internal_stopsimreq();
}
inline void EnvActMsg::_internal_set_stopsimreq(bool value) {
  
  stopsimreq_ = value;
}
inline void EnvActMsg::set_stopsimreq(bool value) {
  _internal_set_stopsimreq(value);
  // @@protoc_insertion_point(field_set:ns3opengym.EnvActMsg.stopSimReq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns3opengym

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ns3opengym::EnvStateMsg_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3opengym::EnvStateMsg_Reason>() {
  return ::ns3opengym::EnvStateMsg_Reason_descriptor();
}
template <> struct is_proto_enum< ::ns3opengym::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3opengym::MsgType>() {
  return ::ns3opengym::MsgType_descriptor();
}
template <> struct is_proto_enum< ::ns3opengym::SpaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3opengym::SpaceType>() {
  return ::ns3opengym::SpaceType_descriptor();
}
template <> struct is_proto_enum< ::ns3opengym::Dtype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3opengym::Dtype>() {
  return ::ns3opengym::Dtype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
